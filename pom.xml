<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>Projet_YNH</groupId>
	<artifactId>Projet_YNH</artifactId>
	<version>0.1.24-SNAPSHOT</version>
	<packaging>war</packaging>

	<properties>
		<project.build.sourceEncoding>cp1252</project.build.sourceEncoding>
		<!-- les versions des dépendances -->
		<spring.version>5.3.5</spring.version>
		<hibernate.core.version>5.4.28.Final</hibernate.core.version>
		<mysql.connector.version>8.0.23</mysql.connector.version>
		<dbcp2.version>2.8.0</dbcp2.version>
		<junit.version>5.7.1</junit.version>
		<junit.plateform.version>1.7.0</junit.plateform.version>
		<junit.jupiter.version>5.7.0</junit.jupiter.version>
		<javax.servlet.version>4.0.1</javax.servlet.version>
		<jstl.version>1.2</jstl.version>
		<tiles.version>3.0.8</tiles.version>
		<mockito.core.version>3.8.0</mockito.core.version>
		<logback.classic.version>1.2.3</logback.classic.version>

		<!-- les versions des Plugins -->
		<maven.surefire.plugin.version>2.22.2</maven.surefire.plugin.version>
		<sonar.plugin.version>3.7.0.1746</sonar.plugin.version>
		<jacoco.plugin.version>0.8.7</jacoco.plugin.version>
		<maven.compiler.plugin.version>3.8.1</maven.compiler.plugin.version>
		<maven.war.plugin.version>3.3.1</maven.war.plugin.version>

	</properties>

	<!-- Sonar profile config -->
	<profiles>
		<!-- mvn sonar:sonar -->
		<profile>
			<id>sonar</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<properties>
				<!-- URL du sonar -->
				<sonar.host.url>http://localhost:9000</sonar.host.url>
				<!-- Credentials -->
				<sonar.login>${sonar.token}</sonar.login>
				<!-- Java version -->
				<sonar.language>java</sonar.language>
				<sonar.java.source>11</sonar.java.source>
				<!-- SCM Disabled (Warning sur sonar) -->
				<sonar.scm.disabled>true</sonar.scm.disabled>
				<!-- Coverage -->
				<sonar.java.coveragePlugin>jacoco</sonar.java.coveragePlugin>
				<!-- Exclusions -->
				<sonar.coverage.exclusions>
					**/bean/**/*.java,
					**/dto/**/*.java,
					**/entity/**/*.java,
					**/WebContent/**/*.*
				</sonar.coverage.exclusions>
				<sonar.exclusions>
					**/css/**,
					**/js/**,
					**/web.xml
				</sonar.exclusions>
				<!-- Exclusions Duplicated Lines -->
				<sonar.cpd.exclusions>
					**/bean/**/*.java,
					**/dto/**/*.java,
					**/entity/**/*.java
				</sonar.cpd.exclusions>
				<!-- Source folder -->
				<sonar.sources>
					src/main/java,WebContent
				</sonar.sources>
				<!-- Test folder -->
				<sonar.tests>src/test/java</sonar.tests>
			</properties>
		</profile>
	</profiles>

	<build>
		<finalName>Projet_YNH</finalName>
		<sourceDirectory>src/main/java</sourceDirectory>
		<testSourceDirectory>src/test/java</testSourceDirectory>
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<excludes>
					<exclude>**/*.java</exclude>
				</excludes>
			</resource>
		</resources>
		<testResources>
			<testResource>
				<directory>src/test/resources</directory>
				<excludes>
					<exclude>**/*.java</exclude>
				</excludes>
			</testResource>
		</testResources>
		<plugins>
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>${maven.compiler.plugin.version}</version>
				<configuration>
					<release>11</release>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>${maven.surefire.plugin.version}</version>
			</plugin>
			<plugin>
				<artifactId>maven-war-plugin</artifactId>
				<version>${maven.war.plugin.version}</version>
				<configuration>
					<warSourceDirectory>WebContent</warSourceDirectory>
					<failOnMissingWebXml>true</failOnMissingWebXml>
				</configuration>
			</plugin>

			<!-- Sonnar plugin -->
			<plugin>
				<groupId>org.sonarsource.scanner.maven</groupId>
				<artifactId>sonar-maven-plugin</artifactId>
				<version>${sonar.plugin.version}</version>
			</plugin>

			<!-- Jacoco -->
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>${jacoco.plugin.version}</version>
				<executions>
					<execution>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
					</execution>
					<execution>
						<id>report</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>report</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<!-- Génération Javadoc -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>3.3.0</version>
				<configuration>
					<show>public</show>
				</configuration>
			</plugin>
		</plugins>
	</build>

	<dependencies>

		<!-- dependances pour junit : -->
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-api</artifactId>
			<version>${junit.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-engine</artifactId>
			<version>${junit.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.junit.platform</groupId>
			<artifactId>junit-platform-runner</artifactId>
			<version>${junit.plateform.version}</version>
			<scope>test</scope>
		</dependency>
		<!-- pour les tests paramétrés -->
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-params</artifactId>
			<version>${junit.jupiter.version}</version>
			<scope>test</scope>
		</dependency>

		<!-- Pour maven Test : -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>${javax.servlet.version}</version>
			<scope>provided</scope>
		</dependency>

		<!-- pour coupler Spring et Junit : -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<version>${spring.version}</version>
		</dependency>

		<!-- spring context : -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>${spring.version}</version>
		</dependency>

		<!-- Object-Relational Mapping de spring : -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-orm</artifactId>
			<version>${spring.version}</version>
		</dependency>

		<!-- Pour spring MVC : -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>${spring.version}</version>
		</dependency>

		<!-- Pour la dataSource : -->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-dbcp2</artifactId>
			<version>${dbcp2.version}</version>
		</dependency>

		<!-- le connector Mysql : -->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>${mysql.connector.version}</version>
		</dependency>

		<!-- hibernate -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-core</artifactId>
			<version>${hibernate.core.version}</version>
		</dependency>

		<!-- Pour utiliser la JSTL dans les JSP : -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
			<version>${jstl.version}</version>
			<scope>provided</scope>
		</dependency>

		<!-- Pour utiliser tiles, les différentes dépendances -->
		<dependency>
			<groupId>org.apache.tiles</groupId>
			<artifactId>tiles-core</artifactId>
			<version>${tiles.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.tiles</groupId>
			<artifactId>tiles-servlet</artifactId>
			<version>${tiles.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.tiles</groupId>
			<artifactId>tiles-jsp</artifactId>
			<version>${tiles.version}</version>
		</dependency>

		<!-- Pour utilser Mockito : -->
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-core</artifactId>
			<version>${mockito.core.version}</version>
			<scope>test</scope>
		</dependency>

		<!-- Dépendance à ajouter pour Logback, importe 3 JARs (logback-classic, logback-core et slf4j-api) -->
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>${logback.classic.version}</version>
		</dependency>
	</dependencies>
</project>